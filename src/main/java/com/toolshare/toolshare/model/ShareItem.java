package com.toolshare.toolshare.model;

//Using lombok to avoid boilerplate code for getters, setters, constructors, ToString
import lombok.*;

import javax.persistence.*;
import javax.validation.constraints.NotBlank;

import java.util.HashSet;
import java.util.Set;

import static javax.persistence.GenerationType.SEQUENCE;

@ToString
@Getter
@Setter
@EqualsAndHashCode
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "shareitem")
public class ShareItem {

    //Defining id, ensuring it is generated by Spring and immutable
    @Id
    @SequenceGenerator(
            name = "item_sequence",
            sequenceName = "item_sequence",
            allocationSize = 1
    )
    @GeneratedValue(
            generator = "item_sequence",
            strategy = SEQUENCE)
    private Long itemId;

    //Defining itemName, making it non-nullable
    @NotBlank
    @Column(name = "itemName", nullable = false)
    private String itemName;

    //Defining item description, making it non-nullable
    @NotBlank
    @Column(name = "description", nullable = false)
    private String description;

    //Defining photoURL, making it non-nullable
    @NotBlank
    @Column(name="photoURL", nullable = false)
    private String photoURL;

    //One to many-mapping between item and "loanActions" (uni-directional)
    //LoanActions are clicks in frontend where the participant gets owner details and use a QR code
    //to send a WhatsApp message to the owner of the item
    //One item (class name ShareItem), and (potentially) many loanActions per item
    @OneToMany(
            orphanRemoval = true,
            cascade = {CascadeType.ALL},
            fetch = FetchType.LAZY
    )
    @JoinColumn(name = "item_id")
    private Set<LoanAction> loanActions = new HashSet<>();


}