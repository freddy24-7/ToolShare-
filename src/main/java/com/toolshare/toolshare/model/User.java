package com.toolshare.toolshare.model;

//Using lombok to avoid boilerplate code for getters, setters, constructors, ToString
import lombok.*;

import javax.persistence.*;
import javax.validation.constraints.NotBlank;
import java.time.LocalDateTime;

import static javax.persistence.GenerationType.SEQUENCE;

@ToString
@Getter
@Setter
@EqualsAndHashCode
@AllArgsConstructor
@NoArgsConstructor
@Entity(name = "User")
@Table(name = "users",
        uniqueConstraints = {
                @UniqueConstraint(name = "username_unique",
                        columnNames = "username")
        }
)

//"Participant" and "User" are in this application separated for the sake of convenience
//"User" handles spring security and security configurations, including JWT creation
//"Participant" handles all transactions, and just passes the JWT token that was created by "User"
//A 1-1 mapping between the two is handled in the models package

public class User {

    //Defining User id, ensuring it is generated by Spring and immutable
    @Id
    @SequenceGenerator(
            name = "user_sequence",
            sequenceName = "user_sequence",
            allocationSize = 1
    )
    @GeneratedValue(
            strategy = SEQUENCE,
            generator = "user_sequence")
    @Column(name = "id",
            updatable = false)
    private Long id;

    //Defining username, making it non-nullable
    @NotBlank
    @Column(name = "username", nullable = false, columnDefinition = "TEXT")
    private String username;

    //Defining password, making it non-nullable
    @NotBlank
    @Column(name = "password", nullable = false, columnDefinition = "TEXT")
    private String password;

    //This field is autogenerated to keep track of when a user was created
    @Column(name = "create_time", nullable = false)
    private LocalDateTime createTime;

    //This field defines role (will be "user" or "admin")
    @Enumerated(EnumType.STRING)
    @Column(name = "role", nullable = false)
    private Role role;

    //This token is used in the application to define the JWT-token
    @Transient
    private String token;

    //Defining one extra constructor - with all variables except the id
    public User(String username, String password, LocalDateTime createTime, Role role, String token, Participant participant) {
        this.username = username;
        this.password = password;
        this.createTime = createTime;
        this.role = role;
        this.token = token;
    }
}
